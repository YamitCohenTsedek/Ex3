@{
    ViewBag.Title = "DisplayRoute";
}


<html>
<body background="~/Content/earth.png" style="background-size:100% 100%; background-attachment:fixed">
    <canvas id="DisplayLineCanvas" style="background-size:100% 100%; top:0; left:0; margin:0"></canvas>
    <script>
        var c = document.getElementById("DisplayLineCanvas");
        c.width = window.innerWidth;
        c.height = window.innerHeight;
        c.style.position = "absolute";
        var ctx = c.getContext("2d");
        // Get the time value from the controller.
        var IntervalTime = 1000 * @Session["time"];
        // isStartPoint indicates that we should draw the start point of the flight.
        var isStartPoint = 1;
        // Save the old values of the lon & lat.
        var oldNormalizedLon;
        var oldNormalizedLat;
        myTimer = (function () {
            $.post("@Url.Action("GetValuesFromSimulatorAndDisplayRoute")").done(function (xml) {
                var xmlDoc = $.parseXML(xml),
                    $xml = $(xmlDoc);
                // Extract the lon & lat values.
                lon = $xml.find("Lon").text();
                lon = parseFloat(lon);
                lat = $xml.find("Lat").text();
                lat = parseFloat(lat);
                // Normalize the values of the lon & lat.
                var newNormalizedLon = (lon + 180) * (c.width / 360);
                var newNormalizedLat = (lat + 90) * (c.height / 180);
                // If it's the start point of the flight - draw it.
                if (isStartPoint) {
                    isStartPoint = 0;
                    ctx.beginPath();
                    ctx.lineWidth = 3;
                    ctx.arc(newNormalizedLon, newNormalizedLat, 6, 0, 2 * Math.PI);
                    ctx.fillStyle = "Red";
                    ctx.fill();
                    ctx.strokeStyle = "Blue";
                    ctx.stroke();
                    ctx.closePath();
                    oldNormalizedLon = newNormalizedLon;
                    oldNormalizedLat = newNormalizedLat;
                // Else - draw the flight route.
                } else {
                    ctx.beginPath();
                    ctx.lineWidth = 2;
                    ctx.lineJoin = 'round';
                    ctx.moveTo(oldNormalizedLon, oldNormalizedLat);
                    ctx.lineTo(newNormalizedLon, newNormalizedLat);
                    oldNormalizedLon = newNormalizedLon;
                    oldNormalizedLat = newNormalizedLat;
                    ctx.strokeStyle = "Red";
                    ctx.stroke();
                    ctx.closePath();
                }
            });
        });

       // Call the timer at the specified interval time.
       setInterval(myTimer, IntervalTime);
       myTimer();
    </script>
</body>
</html>
